[build-system]
requires = ["hatchling","hatch-vcs"]

build-backend = "hatchling.build"

[project]
name = "idc-index"
authors = [
  { name = "Andrey Fedorov", email = "andrey.fedorov@gmail.com" },
  { name = "Vamsi Thiriveedhi", email = "vthiriveedhi@mgh.harvard.edu" },
]
description = "Package to query and download data from an index of ImagingDataCommons"
readme = "README.md"
license.file = "LICENSE"
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
  "Typing :: Typed",
]
dynamic = ["version"]
dependencies = [
  'duckdb>=0.10.0',
  "idc-index-data==18.0.1",
  "packaging",
  "pandas<2.2",
  "psutil",
  "pyarrow",
  "s5cmd",
  "tqdm"
]

[project.optional-dependencies]
test = [
  "pytest >=6",
  "pytest-cov >=3",
]
dev = [
  "pytest >=6",
  "pytest-cov >=3",
]
docs = [
  "sphinx>=7.0",
  "myst_parser>=0.13",
  "sphinx_copybutton",
  "sphinx_autodoc_typehints",
  "furo>=2023.08.17",
]

[project.urls]
Homepage = "https://github.com/ImagingDataCommons/idc-index"
"Bug Tracker" = "https://github.com/ImagingDataCommons/idc-index/issues"
Discussions = "https://discourse.canceridc.dev/"
Changelog = "https://github.com/ImagingDataCommons/idc-index/releases"


[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "idc_index/_version.py"

[tool.hatch.envs.default]
features = ["test"]
scripts.test = "pytest {args}"


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
  # https://github.com/dateutil/dateutil/issues/1314
  "ignore:datetime.datetime.utcfromtimestamp.. is deprecated.*:DeprecationWarning:dateutil",
]
log_cli_level = "INFO"
testpaths = [
  "tests",
]
python_files = [
  "idcindex.py",
  "*_test.py",
  "test_*.py",
]


[tool.coverage]
run.source = ["idc_index"]
report.exclude_also = [
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]

[tool.mypy]
files = ["idc_index", "tests"]
python_version = "3.8"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "idc_index.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true


[tool.ruff]
src = ["idc_index"]

[tool.ruff.lint]
extend-select = [
  "B",        # flake8-bugbear
  "I",        # isort
  "ARG",      # flake8-unused-arguments
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "ICN",      # flake8-import-conventions
  "G",        # flake8-logging-format
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
  "EXE",      # flake8-executable
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "ISC001",   # Conflicts with formatter
  # Exceptions below are specific to idc-index
  "B007",     # Loop control variable {name} not used within loop body
  "B904",     # Checks for raise statements in exception handlers that lack a from clause.
  "E722",     # Do not use bare except
  "EM101",    # Exception must not use a string literal, assign to variable first
  "F841",     # Local variable {name} is assigned to but never used
  "G003",     # Logging statement uses +
  "G004",     # Logging statement uses f-string
  "PD011",    # Use .to_numpy() instead of .values
  "PD901",    # Avoid using the generic variable name df for DataFrames
  "PT009",    # Use a regular assert instead of unittest-style {assertion}
  "PTH100",   # os.path.abspath() should be replaced by Path.resolve()
  "PTH103",   # os.makedirs() should be replaced by Path.mkdir(parents=True)
  "PTH107",   # os.remove() should be replaced by Path.unlink()
  "PTH110",   # os.path.exists() should be replaced by Path.exists()
  "PTH118",   # Checks for uses of os.path.join
  "PTH119",   # os.path.basename() should be replaced by Path.name
  "PTH120",   # os.path.dirname() should be replaced by Path.parent
  "PTH123",   # open() should be replaced by Path.open()
  "RET504",   # Unnecessary assignment to {name} before return statement
  "RET506",   # Unnecessary {branch} after raise statement
  "SIM102",   # Use a single if statement instead of nested if statements
  "SIM108",   # Use ternary operator {contents} instead of if-else-block
  "SIM117",   # Use a single with statement with multiple contexts instead of nested with statements
  "T201",     # print found
]
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["idc_index._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]


[tool.pylint]
py-version = "3.8"
ignore-paths = [".*/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "wrong-import-position",
  # Exceptions below are specific to idc-index
  "invalid-name",
  "missing-class-docstring",
  "missing-function-docstring",
  "logging-fstring-interpolation",
  "logging-not-lazy",
  "no-else-raise",
  "raise-missing-from",
  "undefined-loop-variable",
  "unspecified-encoding",
  "unused-variable",
]
